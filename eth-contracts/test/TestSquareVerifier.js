// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('verifier');
var json = require('./proof.json');

// - use the contents from proof.json generated from zokrates steps
contract('verifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    // Test verification with correct proof
    describe('Test verification with correct proof', function () {
        beforeEach(async function () {
            this.contract = await verifier.new({from: account_one});
        })

        it('correct proof', async function () {
            let result = await this.contract.verifyTx.call(json.proof.a,json.proof.b,json.proof.c,json.inputs);
            assert.equal(result,true,"proof is invalid")
        })

    });

    // Test verification with incorrect proof
    describe('Test verification with incorrect proof', function () {
        beforeEach(async function () {
            this.contract = await verifier.new({from: account_one});
        })

        it('incorrect proof', async function () {

        var errorJson = { proof:
           { a:
              [ "0x17e0c3b697fab8cf3fc65bda254c38abccd218883b5661b2484012d2ea124965", 
                "0xf42fa6eec0134bd3042986814b18227dfa0819a4afbe000ab223c29ec54535"],
             b: [ ["0x7f7865d70d7b5e5ab89a2f5f53e02cc3a351db5024f2f51b0a57f31b1aee2b5", "0x1580c799e33c008d774ab68a3bc4e5bbca015340bc21461a407e311b9f2fa7e5"], ["0x2a660778c9ed2d313550af49658c7ab192a58d786091cc4e0ff93443c5dfe405", "0x12847c868254af86af7da90d811d99deda23d617df46ee4e69c275aff8d55f35"]],
             c:
              [ "0x7500287fcadce532719726d50b3b91265a1bfe0fe6f4a1cc3e1ae8ff84c3ec5", 
                "0x22550f5fa70039b7ef912cf2f90734f9f576460ca6b86e07332cbbbcc3d5fd85"] },
          inputs:
           [ '0x0000000000000000000000000000000000000000000000000000000000000009',
             '0x0000000000000000000000000000000000000000000000000000000000000001' ] }

          let result = await this.contract.verifyTx.call(errorJson.proof.a,errorJson.proof.b,errorJson.proof.c,errorJson.inputs)
          assert.equal(result,false,"proof is invalied")

        });
    });

})